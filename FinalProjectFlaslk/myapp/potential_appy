import re

class TravelBot:
    def __init__(self, csv_data, api_data):
        self.csv_data = csv_data
        self.api_data = api_data

    def extract_temp_range(self, question):
        # Look for expressions like "70 to 80", "between 60 and 75", "around 75"
        match = re.search(r'between (\d{2,3}) and (\d{2,3})', question)
        if match:
            return int(match.group(1)), int(match.group(2))

        match = re.search(r'(\d{2,3}) to (\d{2,3})', question)
        if match:
            return int(match.group(1)), int(match.group(2))

        match = re.search(r'around (\d{2,3})', question)
        if match:
            base = int(match.group(1))
            return base - 3, base + 3  # A +/- 3Â°F window

        return None

    def respond(self, question):
        question = question.lower()
        filtered = self.csv_data.copy()
        score = pd.Series(0, index=filtered.index)

        # --- Temperature Preference ---
        temp_range = self.extract_temp_range(question)
        if temp_range:
            low, high = temp_range
            # Score by closeness to midpoint of range
            midpoint = (low + high) / 2
            distance = (filtered['temperature'] - midpoint).abs()
            max_distance = distance.max() if distance.max() != 0 else 1
            score += (1 - (distance / max_distance)) * 10  # Closer = higher score

        elif "warm" in question:
            score += (filtered['temperature'] - 65).clip(lower=0)

        elif "cold" in question:
            score += (65 - filtered['temperature']).clip(lower=0)

        # --- Setting Preference ---
        setting_preferences = {
            "urban": 10,
            "rural": 10,
            "beach": 12,
            "tropical": 12,
            "historical": 8
        }

        for setting, weight in setting_preferences.items():
            if setting in question:
                score += (filtered['setting'].str.lower() == setting) * weight

        # --- Flight Cost Preference ---
        if "cheap flight" in question or "cheap" in question or "budget" in question:
            max_cost = filtered['flight_cost'].max()
            normalized_cost = 1 - (filtered['flight_cost'] / max_cost)
            score += normalized_cost * 10

        # --- Check for Input ---
        if score.sum() == 0:
            return ("Tell me more about your preferences! For example:\n"
                    "- 'Where can I go that's between 70 and 80 degrees and tropical?'\n"
                    "- 'Looking for a beach city with temps around 75 and cheap flights'")

        # --- Return Top Matches ---
        top_indices = score.nlargest(3).index
        top_cities = filtered.loc[top_indices, 'city']
        top_scores = score.loc[top_indices].astype(int)

        if not top_cities.empty:
            recommendations = [f"{city} (score: {s})" for city, s in zip(top_cities, top_scores)]
            return "Based on your preferences, consider: " + ", ".join(recommendations)
        else:
            return "Hmm, I couldn't find a great match. Try adjusting your preferences!"
